@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix java: <https://github.com/ahbnr/SemanticJavaDebugger/Java#> .
@prefix prog: <https://github.com/ahbnr/SemanticJavaDebugger/Program#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix domain: <https://github.com/ahbnr/SemanticJavaDebugger/BTrees#> .

java:hasElement a owl:ObjectProperty .
java:ArrayElement a owl:Class .

domain:NodeBase rdf:type owl:Class ;
            owl:equivalentClass
            [
                a owl:Class ;
                owl:intersectionOf (
                    prog:examples.btrees.BTreeNode
                    [
                        rdfs:comment """Every node can have at most 2M children, where M is the order of the tree."""^^rdfs:Literal ;
                        rdf:type owl:Restriction ;
                        owl:onProperty prog:examples.btrees.BTreeNode.children ;
                        owl:allValuesFrom [
                            rdf:type owl:Restriction ;
                            owl:onProperty java:hasElement ;
                            owl:maxQualifiedCardinality "4"^^xsd:nonNegativeInteger ;
                            owl:onClass [
                                a owl:Restriction ;
                                owl:onProperty java:storesReference ;
                                owl:allValuesFrom prog:examples.btrees.BTreeNode
                            ]
                        ]
                    ]
                )
            ] .

domain:IntermediateNode
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            domain:NodeBase
            [
                rdfs:comment """Every non-leaf, non-root node must have at least M children, where M is the order of the tree."""^^rdfs:Literal ;
                rdf:type owl:Restriction ;
                owl:onProperty prog:examples.btrees.BTreeNode.children ;
                owl:allValuesFrom [
                    rdf:type owl:Restriction ;
                    owl:onProperty java:hasElement ;
                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                    owl:onClass [
                        a owl:Restriction ;
                        owl:onProperty java:storesReference ;
                        owl:allValuesFrom prog:examples.btrees.BTreeNode
                    ]
                ]
            ]
        )
    ] .

domain:Leaf a owl:Class ;
            owl:equivalentClass [
                a owl:Class ;
                owl:intersectionOf (
                    domain:NodeBase
                    [
                        a owl:Restriction ;
                        owl:onProperty prog:examples.btrees.BTreeNode.children ;
                        owl:allValuesFrom [
                            rdf:type owl:Restriction ;
                            owl:onProperty java:hasElement ;
                            owl:allValuesFrom [
                                    a owl:Class ;
                                    owl:intersectionOf (
                                        prog:ArrayElement%3Cexamples.btrees.BTreeNode%3E
                                        [
                                            a owl:Restriction ;
                                            owl:onProperty java:storesReference ;
                                            owl:allValuesFrom [
                                                a owl:Class ;
                                                owl:oneOf ( java:null )
                                            ]
                                        ]
                                    )
                            ]
                        ]
                    ]
                )
            ] .

domain:rolifiedBTreeNode
    a owl:ObjectProperty .

prog:examples.btrees.BTreeNode owl:equivalentClass [
        a owl:Restriction ;
        owl:onProperty domain:rolifiedBTreeNode ;
        owl:hasSelf "true"^^xsd:boolean
    ] .

domain:storesNonNullReference%3Cexamples.btrees.BTreeNode%3E
            a owl:ObjectProperty ;
            owl:propertyChainAxiom (
                prog:storesReference%3Cexamples.btrees.BTreeNode%3E
                domain:rolifiedBTreeNode
            ) .

domain:hasChild # HermiT fails here because `domain:storesNonNullReference%3Cexamples.btrees.BTreeNode%3E` is complex
    a owl:ObjectProperty ;
    owl:propertyChainAxiom (
        prog:examples.btrees.BTreeNode.children
        prog:hasElement%3Cexamples.btrees.BTreeNode%3E
        domain:storesNonNullReference%3Cexamples.btrees.BTreeNode%3E
    ) .

# These restrictions of HermiT should trigger a linter!
#
# domain:hasChild # HermiT can do this, since none of the properties are complex
#     a owl:ObjectProperty ;
#     owl:propertyChainAxiom (
#         prog:examples.btrees.BTreeNode.children
#         prog:hasElement%3Cexamples.btrees.BTreeNode%3E
#         prog:storesReference%3Cexamples.btrees.BTreeNode%3E
#     ) .

domain:hasParent
    a owl:ObjectProperty ;
    owl:inverseOf domain:hasChild .

domain:HasParent
    a owl:Class ;
    owl:complementOf [
        a owl:Restriction ;
        owl:onProperty domain:hasParent ;
        owl:someValuesFrom prog:examples.btrees.BTreeNode
    ] .

domain:Root
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:examples.btrees.BTreeNode
            [
                a owl:Class ;
                owl:complementOf # Even if it can infer the below, Openllett fails here
                [ # Openllet fails to infer this class iff domain:hasChild is complex
                    a owl:Restriction ;
                    owl:onProperty domain:hasParent ;
                    owl:someValuesFrom prog:examples.btrees.BTreeNode
                ]
            ]
        )
    ] .

# domain:Root
#     a owl:Class ;
#     owl:intersectionOf (
#         owl:disjointUnionOf (
#             domain:Leaf
#             [
#                 a owl:Class ;
#                 owl:intersectionOf (
#                     domain:NodeBase
#                     [
#                         rdfs:comment """Every non-leaf root node has at least two children."""^^rdfs:Literal ;
#                         rdf:type owl:Restriction ;
#                         owl:onProperty prog:examples.btrees.BTreeNode.children ;
#                         owl:allValuesFrom [
#                             rdf:type owl:Restriction ;
#                             owl:onProperty java:hasElement ;
#                             owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
#                             owl:onClass [
#                                 a owl:Restriction ;
#                                 owl:onProperty java:storesReference ;
#                                 owl:allValuesFrom prog:examples.btrees.BTreeNode
#                             ]
#                         ]
#                     ]
#                 )
#             ]
#         )
#         [
#
#         ]
#     ) .

# owl:Nothing owl:equivalentClass [ rdf:type owl:Restriction ;
#                                   owl:onProperty prog:examples.btrees.BTreeNode.children ;
#                                   owl:someValuesFrom domain:Root
#                                 ] .

#[ rdf:type owl:Axiom ;
#   owl:annotatedSource [ rdf:type owl:Restriction ;
#                         owl:onProperty prog:examples.btrees.BTreeNode.children ;
#                         owl:someValuesFrom [
#                            a owl:Restriction ;
#                            owl:onProperty java:hasElement ;
#                            owl:someValuesFrom [
#                                a owl:Restriction ;
#                                owl:onProperty java:storesReference ;
#                                owl:someValuesFrom domain:Root
#                            ]
#                         ];
#                         owl:equivalentClass owl:Nothing
#                       ] ;
#   owl:annotatedProperty owl:equivalentClass ;
#   owl:annotatedTarget owl:Nothing ;
#   rdfs:comment "BTree roots are not children of any other nodes"^^rdfs:Literal
# ] .

# domain:Node
#     a owl:Class ;
#     owl:unionOf (
#         domain:Root
#         domain:IntermediateNode
#         domain:Leaf
#     ) .