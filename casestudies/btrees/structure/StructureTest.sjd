reasoner HermiT
domain casestudies/btrees/structure/BTreeStructure.ttl

stop at 'casestudies.btrees.structure.StructureTest:Test Point'
run casestudies.btrees.structure.StructureTest

buildkb --limit-sdk --deep=casestudies.btrees.structure.BTreeNode.children --deep=casestudies.btrees.structure.BTreeNode.keys
close prog:casestudies.btrees.structure.BTreeNode --no-reasoner

# We can see that there is a node which is not valid
owl entails 'prog:casestudies.btrees.structure.BTreeNode SubClassOf: domain:ValidNode'

# Ok, then let's ask which nodes are not valid:
owl instancesOf 'prog:casestudies.btrees.structure.BTreeNode and not domain:ValidNode'

# What condition does it violate? Lets check

owl entails '?i0 Type: domain:ConditionOne'
# Condition One holds

owl entails '?i0 Type: domain:ConditionTwo'
# Condition Two holds

owl entails '?i0 Type: domain:ConditionThree'
# Condition Three does not hold!
# Hence, ?i0 must be a root node which is neither a leaf nor does it have at least two children

# Further inspection with SPARQL reveals that there are only two nodes and a key value is missing
reasoner Openllet
sparql 'SELECT ?n ?k WHERE { ?n domain:hasKey [ java:hasPlainValue ?k ]}'

# We can conclude, that the new node created during splitting got lost

cont
