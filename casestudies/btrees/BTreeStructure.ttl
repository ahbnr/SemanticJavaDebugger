@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix java: <https://github.com/ahbnr/SemanticJavaDebugger/Java#> .
@prefix prog: <https://github.com/ahbnr/SemanticJavaDebugger/Program#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix domain: <https://github.com/ahbnr/SemanticJavaDebugger/BTrees#> .

java:hasElement a owl:ObjectProperty .
java:SequenceElement a owl:Class .

domain:Root
    a owl:Class ;
    # A root node is a node that is not a child of any other node
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Restriction ;
                owl:onProperty [
                    a owl:ObjectProperty ;
                    owl:inverseOf java:storesReference
                ] ;
                owl:allValuesFrom
                [
                    a owl:Restriction ;
                    owl:onProperty [
                        a owl:ObjectProperty ;
                        owl:inverseOf java:hasElement
                    ] ;
                    owl:allValuesFrom
                    [
                        a owl:Restriction ;
                        owl:onProperty [
                            a owl:ObjectProperty ;
                            owl:inverseOf prog:SysLoader-casestudies.btrees.structure.BTreeNode.children
                        ] ;
                        owl:allValuesFrom owl:Nothing
                    ]
                ]
            ]
        )
    ] .

# Leaf ≡ BTreeNode ⊓ ∀children. ∀hasElement. ∀storesReference. {null}
domain:Leaf
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Restriction ;
                owl:onProperty prog:SysLoader-casestudies.btrees.structure.BTreeNode.children ;
                owl:allValuesFrom [
                    a owl:Restriction ;
                    owl:onProperty java:hasElement ;
                    owl:allValuesFrom [
                        a owl:Restriction ;
                        owl:onProperty java:storesReference ;
                        owl:allValuesFrom [
                            a owl:Class ;
                            owl:oneOf ( java:null )
                        ]
                    ]
                ]
            ]
        )
    ] .

domain:NodeWithTwoChildren
    # Restriction on complex property hasChild does not work with reasoners
    # we have to do it stepwise
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Restriction ;
                owl:onProperty prog:SysLoader-casestudies.btrees.structure.BTreeNode.children ;
                owl:someValuesFrom [
                    a owl:Restriction ;
                    owl:onProperty java:hasElement ;
                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                    owl:onClass [
                        a owl:Restriction ;
                        owl:onProperty java:storesReference ;
                        owl:someValuesFrom prog:SysLoader-casestudies.btrees.structure.BTreeNode
                    ]
                ]
            ]
        )
    ] .

domain:HasMChildren
    # Node that has M children where M is the order of the tree
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Restriction ;
                owl:onProperty prog:SysLoader-casestudies.btrees.structure.BTreeNode.children ;
                owl:someValuesFrom [
                    a owl:Restriction ;
                    owl:onProperty java:hasElement ;
                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                    owl:onClass [
                        a owl:Restriction ;
                        owl:onProperty java:storesReference ;
                        owl:someValuesFrom prog:SysLoader-casestudies.btrees.structure.BTreeNode
                    ]
                ]
            ]
        )
    ] .

# There are not more than 2*M children in a B-Tree node where M is the order of the tree
domain:ConditionOne
    a owl:Class ;
    # We have to model this stepwise, since we can not count complex properties ?
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Restriction ;
                owl:onProperty prog:SysLoader-casestudies.btrees.structure.BTreeNode.children ;
                owl:someValuesFrom [
                    a owl:Restriction ;
                    owl:onProperty java:hasElement ;
                    owl:maxQualifiedCardinality "4"^^xsd:nonNegativeInteger ;
                    owl:onClass [
                        a owl:Restriction ;
                        owl:onProperty java:storesReference ;
                        owl:someValuesFrom prog:SysLoader-casestudies.btrees.structure.BTreeNode
                    ]
                ]
            ]
        )
    ] .

# If a node is not a leaf and not root, it has at least M children, where M is the order of the tree
# => Either a node is a leaf, or it is root, or it has at least M children
domain:ConditionTwo
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:unionOf (
            domain:Leaf
            domain:Root
            domain:HasMChildren
        )
    ] .

# A root node is either a leaf or has at least two children
domain:ConditionThree
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            prog:SysLoader-casestudies.btrees.structure.BTreeNode
            [
                a owl:Class ;
                owl:unionOf (
                    # Either it is not a root node, or it must be a leaf or have at least two children
                    [
                        a owl:Class ;
                        owl:complementOf domain:Root
                    ]
                    domain:Leaf
                    domain:NodeWithTwoChildren
                )
            ]
        )
    ] .

# Condition 4 an not be formulated
#
# If a node is not a leaf, then it has k keys iff it has k+1 children
#
# We can not make perform arithmetic or compare the sizes of arrays directly.
# However, with some creative thinking, this can be formulated in general DL:
#
# Let
#
#   KeysToChildren := inverse BTreeNode.keys o BTreeNode.children
#
#   Dom(R) := R some owl:Thing
#   Img(R) := inverse R some owl:Thing
#
#   rolified(C) Self EquivalentTo: C
#
#   "Assigning key array elements to child array elements if they have the same index"
#
#   SameIdx :=
#       rolified(Img(keys))
#     o java:hasIndex
#     o rolified(xsd:int)
#     o inverse java:hasIndex
#     o rolified(Dom(BTreeNode.children))
#
#   NonNull := storesReference some BTreeNode
#
#   "Every key has a left child associated with it"
#
#   (Dom(BTreeNode.keys) and NonNull) EquivalentTo SameIdx some NonNull
#
#   "Last element of a sequence"
#
#   LastElement := java:hasSuccessor only (java:storesReference some {java:null})
#
#   LastChild := BTreeNode and ((inverse java:storesReference) some LastElement)
#
#   "The last child has no key associated with it"
#
#   LastChild EquivalentTo (inverse SameIdx some (java:storesReference some {java:null}))
#
# Problem: This requires chaining and rollification of indices, but this is not allowed for data values.
#  (maybe because the space of values is infinite?)
#
# Possible fix: Explicitly generate finite class of indices as named individuals and assign those to
#   SequenceElements, too

# Maybe we can formulate something weaker to replace this one?

# We can for example check some low-level structural properties, that is, the key and child arrays are not fragmented,
# they have a continues initial block of entries, and then only null values.

# Condition 5: All leaves appear at the same level
#   Can not be formulated, we dont have arithmetic to compute depth

# A node is valid, if it implements all conditions
domain:ValidNode
    a owl:Class ;
    owl:equivalentClass [
        a owl:Class ;
        owl:intersectionOf (
            domain:ConditionOne
            domain:ConditionTwo
            domain:ConditionThree
        )
    ] .